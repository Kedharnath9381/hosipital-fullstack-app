name: Deploy Ecommerce Fullstack App on EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: List repo files
        run: ls -la

      # Copy repo to EC2
      - name: Copy repo to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          source: "./"
          target: /home/${{ secrets.AWS_USERNAME }}/ecommercefullstack
          strip_components: 0

      - name: Deploy on EC2 with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          script_stop: true
          debug: true
          script: |
            set -euo pipefail
            echo "🚀 Starting deployment on $(hostname) as $(whoami)"
            TARGET="/home/${{ secrets.AWS_USERNAME }}/ecommercefullstack"
            cd "$TARGET"

            # Detect package manager
            if command -v apt-get >/dev/null 2>&1; then
              PKG="apt"
            elif command -v yum >/dev/null 2>&1; then
              PKG="yum"
            else
              echo "❌ No supported package manager found (apt-get or yum)"
              exit 1
            fi

            # Install Docker if missing
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              if [ "$PKG" = "apt" ]; then
                sudo apt-get update -y
                sudo apt-get install -y ca-certificates curl gnupg lsb-release
                sudo mkdir -p /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                sudo apt-get update -y
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              else
                sudo yum update -y
                sudo amazon-linux-extras enable docker || true
                sudo yum install -y docker
                sudo systemctl enable --now docker
              fi
              sudo systemctl start docker || true
              sudo usermod -aG docker $USER || true
            else
              echo "✅ Docker already installed"
            fi

            # Detect docker compose
            if docker compose version >/dev/null 2>&1; then
              DCMD="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DCMD="docker-compose"
            else
              echo "Installing docker-compose..."
              if [ "$PKG" = "apt" ]; then
                sudo apt-get install -y docker-compose-plugin
              else
                sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi
              if docker compose version >/dev/null 2>&1; then
                DCMD="docker compose"
              else
                DCMD="docker-compose"
              fi
            fi
            echo "Using compose command: $DCMD"

            # Stop old containers, rebuild, and restart
            sudo $DCMD down || true
            sudo $DCMD up -d --build

            echo "---- Running containers ----"
            sudo docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
